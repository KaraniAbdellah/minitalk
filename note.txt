// Processes and signals
/*
    - Signal: is a message that is sent to a process to indicate a particular event
        has occurred or to request a particular action to be taken.
    - Process: is a program that is being executed by the computer.

    - Remember: a signal is just telling a process to do a certain thing

    - To send a signal to a certain process you need the PID --> kill <PID>
    - To Know The PID --> top
        kill 1828 $$ killall brave $$ ps -Af | grep brave
*/

// Function Used
/*
    signal():
        "sighandler_t signal(int signum, sighandler_t handler);"
        signal function allows you to specify a function to be called
            when a particular signal is received.
        A signal is a message from the operating system to a 
            program indicating that some event has occurred

    sigemptyset():
        "int sigemptyset(sigset_t *set);"
        The sigemptyset function is used to initialize a signal set to the empty set,
            which means that it does not contain any signals. Signal sets
            are used by some functions, such as sigaction

    sigaddset():
        "int sigaddset(sigset_t *set, int signum);"
        This function allows to add a signal to a set of signals.
    
    sigaction():
        "int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);"
        function in C is used to specify the action to be taken when a specific signal is 
            received by a process. It is defined in the signal.h header file.

        The 'signum' argument specifies the signal for which the action is being specified.
        The 'act' argument is a pointer to a struct 'sigaction' that specifies the
            action to be taken when the signal is received.
        The 'oldact' argument is a pointer to a struct sigaction that is used
            to retrieve the previous action for the specified signal.
        
    kill():
        "int kill(pid_t pid, int sig);"
        the kill function is a system call that sends a signal to a process.
            It is defined in the signal.h header file

    pause():
        "int pause(void);"
        is a function in the C standard library that causes the calling
            process to sleep until a signal is received.
    
    sleep():
        "unsigned int sleep(unsigned int seconds);"
        sleep() is also a function in the C standard library that causes
            the calling process to sleep for a specified number of seconds.

*/


